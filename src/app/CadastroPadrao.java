/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package app;

import app.InterfacePainel;
import cadastro.PainelBairros;
import cadastro.PainelBairros;
import controller.BairroController;
import controller.InterfaceController;
import dto.BairroDTO;
import dto.CarrinhoDTO;
import dto.CartaoDTO;
import dto.ClienteDTO;
import dto.CupomDTO;
import dto.DeliveryDTO;
import dto.DinheiroDTO;
import dto.EnderecoDTO;
import dto.EntregaDTO;
import dto.FuncionarioDTO;
import dto.IngredienteAdicionalDTO;
import dto.IngredienteEscolhaDTO;
import dto.IngredienteRemoverDTO;
import dto.LoginDTO;
import dto.MetodoPagamentoDTO;
import dto.PedidoDTO;
import dto.ProdutoDTO;
import dto.ReembolsoDTO;
import dto.StatusPedidoDTO;
import dto.TaxaEntregaDTO;
import dto.TelefoneDTO;
import java.awt.BorderLayout;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author alenc
 */
public class CadastroPadrao extends javax.swing.JDialog {

    /**
     * Creates new form CadastroPadrao
     */
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(CadastroPadrao.class.getName());
    private final InterfacePainel painelCentro;
    private final InterfaceController controller;

    public CadastroPadrao(java.awt.Frame parent, InterfacePainel painelCentro, InterfaceController controller, boolean modal) {
        super(parent, modal);
        initComponents();
        this.painelCentro = painelCentro;
        this.controller = controller;

        add((javax.swing.JPanel) painelCentro, BorderLayout.CENTER);
        pack();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jbSalvar = new javax.swing.JButton();
        jbCancelar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jbSalvar.setText("Salvar");
        jbSalvar.setToolTipText("");
        jbSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSalvarActionPerformed(evt);
            }
        });
        jPanel1.add(jbSalvar);

        jbCancelar.setText("Cancelar");
        jbCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCancelarActionPerformed(evt);
            }
        });
        jPanel1.add(jbCancelar);

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_END);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSalvarActionPerformed
        Object dto = painelCentro.getDados();
        
        if(dto == null){
            return;
        }
        
        if (!validarDTO(dto)){
            return;
        }
        
        try {
            controller.salvar(painelCentro.getDados());
            dispose();
        } catch (SQLException ex) {
            Logger.getLogger(CadastroPadrao.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Erro ao salvar:\n" + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jbSalvarActionPerformed

    private void jbCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCancelarActionPerformed
        dispose();
    }//GEN-LAST:event_jbCancelarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CadastroPadrao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CadastroPadrao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CadastroPadrao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CadastroPadrao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                InterfacePainel painel = new PainelBairros();
                InterfaceController controller = new BairroController();

                CadastroPadrao dialog = new CadastroPadrao(new javax.swing.JFrame(), painel, controller, true);
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton jbCancelar;
    private javax.swing.JButton jbSalvar;
    // End of variables declaration//GEN-END:variables

    private boolean validarDTO(Object dto) {
        if (dto instanceof BairroDTO bairro) {
            if (bairro.nomeBairro == null || bairro.nomeBairro.trim().isEmpty()) {
                mostrarAlerta("Informe o nome do bairro.");
                return false;
            }
        }

        if (dto instanceof CarrinhoDTO carrinho) {
            if (carrinho.qntdItens == null || carrinho.qntdItens.trim().isEmpty()) {
                mostrarAlerta("Informe a quantidade de itens.");
                return false;
            }
        }

        if (dto instanceof CartaoDTO cartao) {
            if (cartao.codCartao == null || cartao.codCartao.trim().isEmpty() || cartao.nCartao == null || cartao.nCartao.trim().isEmpty() || cartao.tipoCartao == null || cartao.tipoCartao.trim().isEmpty()) {
                mostrarAlerta("Informe todos os dados.");
                return false;
            }
        }

        if (dto instanceof ClienteDTO cliente) {
            if (cliente.nomeCliente == null || cliente.nomeCliente.trim().isEmpty()) {
                mostrarAlerta("Informe o nome do cliente.");
                return false;
            }
        }

        if (dto instanceof CupomDTO cupom) {
            if (cupom.codigoC == null || cupom.codigoC.trim().isEmpty() || cupom.valorC == null || cupom.valorC.trim().isEmpty()) {
                mostrarAlerta("Informe todos os dados.");
                return false;
            }
        }

        if (dto instanceof DeliveryDTO delivery) {
            if (delivery.chaveEntregaD == null || delivery.chaveEntregaD.trim().isEmpty() || delivery.complementoD == null || delivery.complementoD.trim().isEmpty() || delivery.numeroD == null || delivery.numeroD.trim().isEmpty()) {
                mostrarAlerta("Informe todos os dados.");
                return false;
            }
        }

        if (dto instanceof DinheiroDTO dinheiro) {
            if (dinheiro.valorD == null || dinheiro.valorD.trim().isEmpty()) {
                mostrarAlerta("Informe todos os dados.");
                return false;
            }
        }

        if (dto instanceof EnderecoDTO endereco) {
            if (endereco.ruaEnd == null || endereco.ruaEnd.trim().isEmpty() || endereco.cepEnd == null || endereco.cepEnd.trim().isEmpty() || endereco.distanciaEnd == null || endereco.distanciaEnd.trim().isEmpty()) {
                mostrarAlerta("Informe todos os dados.");
                return false;
            }
        }

        if (dto instanceof EntregaDTO entrega) {
            if (entrega.tipoEntregaE == null || entrega.tipoEntregaE.trim().isEmpty()) {
                mostrarAlerta("Informe o tipo de entrega.");
                return false;
            }
        }

        if (dto instanceof FuncionarioDTO funcionario) {
            if (funcionario.nomeFun == null || funcionario.nomeFun.trim().isEmpty() || funcionario.cpfFun == null || funcionario.cpfFun.trim().isEmpty() || funcionario.rgFun == null || funcionario.rgFun.trim().isEmpty()) {
                mostrarAlerta("Informe todos os dados.");
                return false;
            }
        }

        if (dto instanceof IngredienteAdicionalDTO ingAdc) {
            if (ingAdc.nomeIngrAdc == null || ingAdc.nomeIngrAdc.trim().isEmpty() || ingAdc.valorIngrAdc == null || ingAdc.valorIngrAdc.trim().isEmpty()) {
                mostrarAlerta("Informe todos os dados.");
                return false;
            }
        }

        if (dto instanceof IngredienteEscolhaDTO ingEsc) {
            if (ingEsc.ingrAdcs == null || ingEsc.ingrAdcs.isEmpty() || ingEsc.ingrRemovs == null || ingEsc.ingrRemovs.isEmpty()) {
                mostrarAlerta("Informe todos os dados.");
                return false;
            }
        }
        
        if (dto instanceof IngredienteRemoverDTO ingRem) {
            if (ingRem.nomeIngrRem == null || ingRem.nomeIngrRem.trim().isEmpty()) {
                mostrarAlerta("Informe o nome do ingrediente.");
                return false;
            }
        }
        
        if (dto instanceof LoginDTO login) {
            if (login.loginFun == null || login.loginFun.trim().isEmpty() || login.senhaLogin == null || login.senhaLogin.trim().isEmpty()) {
                mostrarAlerta("Informe todos os dados.");
                return false;
            }
        }
        
        if (dto instanceof MetodoPagamentoDTO metPag) {
            if (metPag.pixPag == null || metPag.pixPag.trim().isEmpty()) {
                mostrarAlerta("Informe os dados do pix.");
                return false;
            }
        }
        
        if (dto instanceof PedidoDTO pedido) {
            if (pedido.nPed == null || pedido.nPed.trim().isEmpty() || pedido.horaPed == null || pedido.horaPed.trim().isEmpty()) {
                mostrarAlerta("Informe todos os dados.");
                return false;
            }
        }
        
        if (dto instanceof ProdutoDTO produto) {
            if (produto.nomeProd == null || produto.nomeProd.trim().isEmpty() || produto.valUnProd == null || produto.valUnProd.trim().isEmpty()) {
                mostrarAlerta("Informe todos os dados.");
                return false;
            }
        }
        
        if (dto instanceof ReembolsoDTO reembolso) {
            if (reembolso.motivoReemb == null || reembolso.motivoReemb.trim().isEmpty()) {
                mostrarAlerta("Informe o motivo do reembolso.");
                return false;
            }
        }
        
        if (dto instanceof StatusPedidoDTO status) {
            if (status.progStatPed == null || status.progStatPed.trim().isEmpty()) {
                mostrarAlerta("Informe o progresso do pedido.");
                return false;
            }
        }
        
        if (dto instanceof TaxaEntregaDTO taxa) {
            if (taxa.valEntrega == null || taxa.valEntrega.trim().isEmpty()) {
                mostrarAlerta("Informe o valor da taxa da entrega.");
                return false;
            }
        }
        
        if (dto instanceof TelefoneDTO tel) {
            if (tel.dddTel == null || tel.dddTel.trim().isEmpty() || tel.numTel == null || tel.numTel.trim().isEmpty()) {
                mostrarAlerta("Informe todos os dados.");
                return false;
            }
        }

        return true;
    }

    private void mostrarAlerta(String mensagem) {
        JOptionPane.showMessageDialog(this, mensagem, "Atenção", JOptionPane.WARNING_MESSAGE);
    }
}
